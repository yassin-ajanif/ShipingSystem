using BusinessAccessLayer.Interfaces;
using DataAccessLayer.Interfaces;
using Domains;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessAccessLayer.Services
{
    public class CountriesService : ICountriesService
    {
        private readonly IGenericRepository<TbCountry> _countryRepository;

        public CountriesService(IGenericRepository<TbCountry> countryRepository)
        {
            _countryRepository = countryRepository;
        }

        public async Task<List<TbCountry>> GetAllAsync()
        {
            var countries = await _countryRepository.GetAllAsync();
            return countries.ToList();
        }

        public async Task<TbCountry?> GetByIdAsync(int id)
        {
            // Convert int to Guid if needed, or update interface to use Guid
            // For now, this will need interface update to work properly
            throw new NotImplementedException("Interface needs to be updated to use Guid instead of int");
        }

        public async Task AddAsync(TbCountry entity)
        {
            await _countryRepository.AddAsync(entity);
        }

        public async Task UpdateAsync(TbCountry entity)
        {
            await _countryRepository.UpdateAsync(entity);
        }

        public async Task DeleteAsync(int id)
        {
            // Convert int to Guid if needed, or update interface to use Guid
            // For now, this will need interface update to work properly
            throw new NotImplementedException("Interface needs to be updated to use Guid instead of int");
        }
    }
}
