using AutoMapper;
using Domains;
using Domains.DTOs;
using Domains.DTOs.Requests;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BusinessAccessLayer.Mapping
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            // TbCountry mappings
            CreateMap<TbCountry, TbCountryDto>()
                .ForMember(dest => dest.CountryAName, opt => opt.MapFrom(src => src.CountryAname))
                .ForMember(dest => dest.CountryEName, opt => opt.MapFrom(src => src.CountryEname))
                .ReverseMap()
                .ForMember(dest => dest.CountryAname, opt => opt.MapFrom(src => src.CountryAName))
                .ForMember(dest => dest.CountryEname, opt => opt.MapFrom(src => src.CountryEName))
                .ForMember(dest => dest.TbCities, opt => opt.Ignore());

            CreateMap<CreateCountryRequest, TbCountry>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => Guid.NewGuid()))
                .ForMember(dest => dest.CreatedDate, opt => opt.MapFrom(src => DateTime.UtcNow))
                .ForMember(dest => dest.CurrentState, opt => opt.MapFrom(src => 1))
                .ForMember(dest => dest.UpdatedDate, opt => opt.Ignore())
                .ForMember(dest => dest.UpdatedBy, opt => opt.Ignore())
                .ForMember(dest => dest.TbCities, opt => opt.Ignore());
            
            CreateMap<UpdateCountryRequest, TbCountry>()
                .ForMember(dest => dest.UpdatedDate, opt => opt.MapFrom(src => DateTime.UtcNow))
                .ForMember(dest => dest.CreatedDate, opt => opt.Ignore())
                .ForMember(dest => dest.CreatedBy, opt => opt.Ignore())
                .ForMember(dest => dest.CurrentState, opt => opt.Ignore())
                .ForMember(dest => dest.TbCities, opt => opt.Ignore());

            // TbCarrier mappings
            CreateMap<TbCarrier, TbCarrierDto>().ReverseMap()
                .ForMember(dest => dest.TbShippmentStatuses, opt => opt.Ignore());

            CreateMap<CreateCarrierRequest, TbCarrier>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => Guid.NewGuid()))
                .ForMember(dest => dest.CreatedDate, opt => opt.MapFrom(src => DateTime.UtcNow))
                .ForMember(dest => dest.CurrentState, opt => opt.MapFrom(src => 1))
                .ForMember(dest => dest.UpdatedDate, opt => opt.Ignore())
                .ForMember(dest => dest.UpdatedBy, opt => opt.Ignore())
                .ForMember(dest => dest.TbShippmentStatuses, opt => opt.Ignore());
            
            CreateMap<UpdateCarrierRequest, TbCarrier>()
                .ForMember(dest => dest.UpdatedDate, opt => opt.MapFrom(src => DateTime.UtcNow))
                .ForMember(dest => dest.CreatedDate, opt => opt.Ignore())
                .ForMember(dest => dest.CreatedBy, opt => opt.Ignore())
                .ForMember(dest => dest.CurrentState, opt => opt.Ignore())
                .ForMember(dest => dest.TbShippmentStatuses, opt => opt.Ignore());

            // TbCity mappings
            CreateMap<TbCity, TbCityDto>()
                .ForMember(dest => dest.CityAName, opt => opt.MapFrom(src => src.CityAname))
                .ForMember(dest => dest.CityEName, opt => opt.MapFrom(src => src.CityEname))
                .ReverseMap()
                .ForMember(dest => dest.CityAname, opt => opt.MapFrom(src => src.CityAName))
                .ForMember(dest => dest.CityEname, opt => opt.MapFrom(src => src.CityEName))
                .ForMember(dest => dest.Country, opt => opt.Ignore())
                .ForMember(dest => dest.TbUserReceivers, opt => opt.Ignore())
                .ForMember(dest => dest.TbUserSebders, opt => opt.Ignore());

            // TbPaymentMethod mappings
            CreateMap<TbPaymentMethod, TbPaymentMethodDto>()
                .ForMember(dest => dest.MethodAName, opt => opt.MapFrom(src => src.MethdAname))
                .ForMember(dest => dest.MethodEName, opt => opt.MapFrom(src => src.MethodEname))
                .ReverseMap()
                .ForMember(dest => dest.MethdAname, opt => opt.MapFrom(src => src.MethodAName))
                .ForMember(dest => dest.MethodEname, opt => opt.MapFrom(src => src.MethodEName))
                .ForMember(dest => dest.TbShippments, opt => opt.Ignore());

            // TbShippingType mappings
            CreateMap<TbShippingType, TbShippingTypeDto>()
                .ForMember(dest => dest.ShippingTypeAName, opt => opt.MapFrom(src => src.ShippingTypeAname))
                .ForMember(dest => dest.ShippingTypeEName, opt => opt.MapFrom(src => src.ShippingTypeEname))
                .ReverseMap()
                .ForMember(dest => dest.ShippingTypeAname, opt => opt.MapFrom(src => src.ShippingTypeAName))
                .ForMember(dest => dest.ShippingTypeEname, opt => opt.MapFrom(src => src.ShippingTypeEName))
                .ForMember(dest => dest.TbShippments, opt => opt.Ignore());

            // TbUserReceiver mappings
            CreateMap<TbUserReceiver, TbUserReceiverDto>().ReverseMap()
                .ForMember(dest => dest.City, opt => opt.Ignore())
                .ForMember(dest => dest.TbShippments, opt => opt.Ignore());

            // TbUserSebder mappings
            CreateMap<TbUserSebder, TbUserSenderDto>().ReverseMap()
                .ForMember(dest => dest.City, opt => opt.Ignore())
                .ForMember(dest => dest.TbShippments, opt => opt.Ignore());

            // TbShippment mappings
            CreateMap<TbShippment, TbShippmentDto>().ReverseMap()
                .ForMember(dest => dest.Sender, opt => opt.Ignore())
                .ForMember(dest => dest.Receiver, opt => opt.Ignore())
                .ForMember(dest => dest.ShippingType, opt => opt.Ignore())
                .ForMember(dest => dest.PaymentMethod, opt => opt.Ignore())
                .ForMember(dest => dest.TbShippmentStatuses, opt => opt.Ignore());

            // TbShippmentStatus mappings
            CreateMap<TbShippmentStatus, TbShippmentStatusDto>().ReverseMap()
                .ForMember(dest => dest.Carrier, opt => opt.Ignore())
                .ForMember(dest => dest.Shippment, opt => opt.Ignore());

            // TbSubscriptionPackage mappings
            CreateMap<TbSubscriptionPackage, TbSubscriptionPackageDto>().ReverseMap()
                .ForMember(dest => dest.TbUserSubscriptions, opt => opt.Ignore());

            // TbUserSubscription mappings
            CreateMap<TbUserSubscription, TbUserSubscriptionDto>().ReverseMap()
                .ForMember(dest => dest.Package, opt => opt.Ignore());

            // TbSetting mappings
            CreateMap<TbSetting, TbSettingDto>().ReverseMap();

            // IEnumerable mappings
            CreateMap<IEnumerable<TbCountry>, List<TbCountryDto>>();
            CreateMap<IEnumerable<TbCarrier>, List<TbCarrierDto>>();
            CreateMap<IEnumerable<TbCity>, List<TbCityDto>>();
            CreateMap<IEnumerable<TbPaymentMethod>, List<TbPaymentMethodDto>>();
            CreateMap<IEnumerable<TbShippingType>, List<TbShippingTypeDto>>();
            CreateMap<IEnumerable<TbUserReceiver>, List<TbUserReceiverDto>>();
            CreateMap<IEnumerable<TbUserSebder>, List<TbUserSenderDto>>();
            CreateMap<IEnumerable<TbShippment>, List<TbShippmentDto>>();
            CreateMap<IEnumerable<TbShippmentStatus>, List<TbShippmentStatusDto>>();
            CreateMap<IEnumerable<TbSubscriptionPackage>, List<TbSubscriptionPackageDto>>();
            CreateMap<IEnumerable<TbUserSubscription>, List<TbUserSubscriptionDto>>();
            CreateMap<IEnumerable<TbSetting>, List<TbSettingDto>>();
        }
    }
}
