using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using ShipingSystem.Models;
using DataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;

namespace ShipingSystem.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;
        private readonly ShipingContext _context;

        public HomeController(ILogger<HomeController> logger, ShipingContext context)
        {
            _logger = logger;
            _context = context;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        // Test function to retrieve countries from database
        public async Task<IActionResult> TestDatabase()
        {
            try
            {
                // Retrieve all countries from TbCountries table
                var countries = await _context.TbCountries.ToListAsync();
                
                // You can set a breakpoint on the next line to inspect the data
                ViewBag.CountriesCount = countries.Count;
                ViewBag.Countries = countries;
                ViewBag.Message = $"Successfully retrieved {countries.Count} countries from database.";
                
                return View("TestDatabase", countries);
            }
            catch (Exception ex)
            {
                // Set breakpoint here to see any errors
                ViewBag.Error = $"Error connecting to database: {ex.Message}";
                _logger.LogError(ex, "Database connection test failed");
                return View("TestDatabase", new List<TbCountry>());
            }
        }

        // Detailed debug function to investigate the database
        public async Task<IActionResult> DebugDatabase()
        {
            try
            {
                // Check if we can connect to the database
                var canConnect = await _context.Database.CanConnectAsync();
                ViewBag.CanConnect = canConnect;

                if (!canConnect)
                {
                    ViewBag.Error = "Cannot connect to the database";
                    return View("DebugDatabase");
                }

                // Get the actual SQL query being executed
                var query = _context.TbCountries.ToQueryString();
                ViewBag.SqlQuery = query;

                // Try to get count first
                var totalCount = await _context.TbCountries.CountAsync();
                ViewBag.TotalCount = totalCount;

                // Get all countries with detailed information
                var countries = await _context.TbCountries
                    .OrderBy(c => c.CreatedDate)
                    .ToListAsync();

                ViewBag.Countries = countries;
                ViewBag.Message = $"Database connection successful. Found {totalCount} records.";

                // Log the details for debugging
                _logger.LogInformation($"TbCountries query: {query}");
                _logger.LogInformation($"Total count: {totalCount}");
                
                foreach (var country in countries)
                {
                    _logger.LogInformation($"Country: ID={country.Id}, ArabicName={country.CountryAname}, EnglishName={country.CountryEname}, State={country.CurrentState}");
                }

                return View("DebugDatabase", countries);
            }
            catch (Exception ex)
            {
                ViewBag.Error = $"Error: {ex.Message}";
                ViewBag.StackTrace = ex.StackTrace;
                _logger.LogError(ex, "Database debug failed");
                return View("DebugDatabase", new List<TbCountry>());
            }
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}
